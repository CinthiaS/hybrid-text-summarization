import numpy as np

from nltk.tokenize import sent_tokenize, word_tokenize
from sumeval.metrics.rouge import RougeCalculator
from xml.etree import ElementTree
from xml.dom import minidom
from functools import reduce
from xml.etree.ElementTree import Element, SubElement, Comment

from nubia_score import Nubia
nubia = Nubia()

def eval(
    reference_summary, model_summary, metrics=["ROUGE_1", "ROUGE_2", "ROUGE_L", "NUBIA"]):

    rouge = RougeCalculator(stopwords=True, lang="en")

    if("ROUGE_1" in metrics):
      rouge_1 = rouge.rouge_n( summary=model_summary, references=reference_summary, n=1)
    else:
      rouge_1 = None

    if("ROUGE_2" in metrics):
      rouge_2 = rouge.rouge_n(summary=model_summary,references=[reference_summary],n=2)
    else:
      rouge_2 = None

    if("ROUGE_L" in metrics):
      rouge_l = rouge.rouge_l( summary=model_summary,references=[reference_summary])
    else:
      rouge_l = None

    if("NUBIA" in metrics):
      nubia_score = nubia.score(reference_summary, model_summary)
    else:
      nubia_score =  None

    return rouge_1, rouge_2,rouge_l, nubia_score

def prettify(elem):
      """Return a pretty-printed XML string for the Element.
      """
      rough_string = ElementTree.tostring(elem, 'utf-8')
      reparsed = minidom.parseString(rough_string)
      return reparsed.toprettyxml(indent="  ")
  
def create_report_valid(
    summary_array, references_summary, article, name_file,
     metrics=["ROUGE_1", "ROUGE_2", "ROUGE_L", "NUBIA"]):

  rouge_1_arr  = []
  rouge_2_arr  = []
  rouge_L_arr  = []
  NUBIA_arr = []
  bleurt_arr = []

  top = Element('ZakSum')

  comment = Comment('Generated by Amr Zaki')
  top.append(comment)

  i=0
  for summ in summary_array:

      
      example = SubElement(top, 'example')
      article_element   = SubElement(example, 'article')
      article_element.text = article[i]
  
      reference_element = SubElement(example, 'reference')
      reference_element.text = references_summary[i]
  
      summary_element   = SubElement(example, 'summary')
      summary_element.text = summ

      if(len(summ) != 0):
        rouge_1, rouge_2, rouge_L, nubia_score  = eval(references_summary[i],summ, metrics=metrics )
      else: 
        rouge_1 = rouge_2 = rouge_L = nubia_score = 0
  
      eval_element = SubElement(example, 'eval')
      if(rouge_1 != None):
        ROUGE_1_element  = SubElement(eval_element, 'ROUGE_1' , {'score':str(rouge_1)})
        rouge_1_arr.append(rouge_1) 
      if(rouge_2 != None):
        ROUGE_2_element  = SubElement(eval_element, 'ROUGE_2' , {'score':str(rouge_2)})
        rouge_2_arr.append(rouge_2)
      if(rouge_L != None):
        ROUGE_L_element  = SubElement(eval_element, 'ROUGE_l' , {'score':str(rouge_L)})
        rouge_L_arr.append(rouge_L)
      if(nubia_score != None): 
        NUBIA_element =  SubElement(eval_element,'NUBIA', {'score':str(nubia_score)})
        NUBIA_arr.append(nubia_score)
  
      i+=1

  if(rouge_1_arr != []): top.set('rouge_1', str(np.mean(rouge_1_arr)))
  if(rouge_2_arr != []): top.set('rouge_2', str(np.mean(rouge_2_arr)))
  if(rouge_L_arr != []): top.set('rouge_L', str(np.mean(rouge_L_arr)))
  if(NUBIA_arr != []): top.set('NUBIA', str(np.mean(NUBIA_arr)))


  with open(name_file, "w+") as f:
    print(prettify(top), file=f)